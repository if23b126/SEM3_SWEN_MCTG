@startuml
' Defining all classes
enum game.Element{
    fire
    water
    normal
}

class game.Monster{
    - String name
    - int damage
    - Element type
}

class game.Spell{
    - String name
    - int damage
    - Element type
}

class game.Card{
    - String name
    - int damage
    - Element type
}

class game.Package{
    - List<Card> cards

    + generatePackage()
    + openPackage()
}

class game.Deck{
    - List<Card> cards

    + PickDeck(List<Card> cards)
}

class game.Battle{
    + GoToBattle(Player fighterOne, Player fighterTwo)
}

class game.Trade{
    + SetTrade(Player trader, Card cardWanted)
    + AcceptTrade(Player trader, Card cardOffered)
    + TradeCards(Player traderOne, Player traderTwoe, Card cardOne, Card cardTwo)
}


class shared.Player{
    - String username
    - String encryptedPassword
    - Deck activeDeck
}

class socket.Server{
    - Socket serverSocket
    - Socket clientSocket
    - String token

    + StartServer()
}

class socket.Reader{
    - Socket clientSocket
}

class socket.Writer{
    - Socket clientSocket
}

class socket.Validator{
    + VerifyUser(String username, String token)
}

class persistence.DatabaseConnector {
    - String usernameRead
    - String passwordRead
    - String usernameWrite
    - String passwordWrite

    + ExecuteRead(String command)
    + ExecuteWrite(String command, String[] data)
}

class persistence.DatabaseReader {

}

class persistence.DatabaseWriter {

}

' Define all Relations
Card <|-- Spell
Card <|-- Monster
Card --* Trade
Deck --* Battle : is used in
Card -left-* Deck : is in
Battle --o Player
Package --o Player

DatabaseConnector o-- DatabaseReader: uses
DatabaseConnector o-- DatabaseWriter: uses

Server o-- Reader : uses
Server o-- Writer : uses
Server o-- Validator : uses

Server --> game : implements
Server --> persistence : uses

Element -- Card
Element -- Monster
Element -- Spell

' Monster <-- Spell
' User <.. Spell
' Package <|-- Spell
' Deck <|.. Spell

@enduml
